#include <stdio.h>
#include <stdlib.h>
#define N 6
//哈曼夫树的存储结构
typedef struct{
    double weight;
    int lchild;
    int rchild;
    int parent;
}HTNode;
typedef HTNode HuffmanT[2*N-1];


void CreatHT(HuffmanT T);//哈曼夫树的构造
void InitHT(HuffmanT T);//初始化结构
void InputW(HuffmanT T);//对权值进行赋值
void SelectMin(HuffmanT T,int m,int *p1,int *p2);//选取两个最小的权值
int main()
{
    HuffmanT T;
    CreatHT(T);
    printf("%d\n",T[7].parent);
    printf("%lf\n",T[8].weight);
    return 0;
}

//哈曼夫树的构造
void CreatHT(HuffmanT T){
    int i,p1,p2;
    InitHT(T);//初始化结构
    InputW(T);//对权值进行赋值
    for(i=N;i<2*N-1;i++){
        SelectMin(T,i-1,&p1,&p2);
        T[p1].parent=T[p2].parent=i;//最小权值的两个结点的父亲都是i
        T[i].lchild=p1;//把i连接的左右儿子信息补全（覆盖修改parent=-1）
        T[i].rchild=p2;
        T[i].weight=T[p1].weight+T[p2].weight;//新节点为权值相加
    }
}

//初始化结构
void InitHT(HuffmanT T){
    int i;
    for(i=0;i<2*N-1;i++){
        T[i].parent=-1;
        T[i].lchild=-1;
        T[i].rchild=-1;
    }
}

//对权值进行赋值,权值是文本读进来的
void InputW(HuffmanT T){
    int i;
    double data;
    FILE *fp;
     if((fp=fopen("E://数据结构//作业2//frequencyAndChar.txt","r"))==NULL)
    {
        printf("fail to open!");
        exit(0);
    }
    for(i=0;i<N;i++){
        fscanf(fp,"%lf\n",&data);//A式子的项数
        T[i].weight=data;
    }
}

//选取两个最小的权值
void SelectMin(HuffmanT T,int m,int *p1,int *p2){
    int i,j;
    for(i=0;i<=m;i++){
        if(T[i].parent==-1){*p1=i;break; }//p1变成*p1
    }
    for(j=i+1;j<=m;j++)
        if(T[j].parent==-1){*p2=j;break; }

    for(i=0;i<=m;i++)
        if((T[*p1].weight>T[i].weight)&& (T[i].parent==-1) &&(*p2!=i) ) *p1=i;

    for(j=0;j<=m;j++)
        if((T[*p2].weight>T[j].weight)&& (T[j].parent==-1) &&(*p1!=j) ) *p2=j;
    printf("p1:%d\n",*p1);
    printf("p2:%d\n",*p2);
}
